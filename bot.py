import telebot
from telebot import types
from datetime import datetime
from gsheets import GoogleSheetsClient
from config import TELEGRAM_TOKEN, ADMIN_IDS, TRAINING_CHAT_ID
from templates_manager import TemplatesManager

gsheets = GoogleSheetsClient()
bot = telebot.TeleBot(TELEGRAM_TOKEN)

templates_manager = TemplatesManager()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
training_states = {}

@bot.message_handler(commands=['addtemplate'])
def add_template(message):
    if not is_admin(message.from_user.id):
        bot.reply_to(message, "‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
        return

    try:
        parts = message.text.split('\n', 2)
        if len(parts) < 3:
            raise ValueError(
                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                "/addtemplate\n"
                "–Ω–∞–∑–≤–∞–Ω–∏–µ\n"
                "—Ç–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞\n\n"
                "–ü—Ä–∏–º–µ—Ä:\n/addtemplate\n–ª–µ—Ç–Ω–∏–π\n–õ–µ—Ç–Ω—è—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ {date}\n–ú–µ—Å—Ç–æ: {location}"
            )

        name = parts[1].strip()
        template_text = parts[2].strip()

        if templates_manager.add_template(name, template_text):
            bot.reply_to(message, f"‚úÖ –®–∞–±–ª–æ–Ω '{name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
        else:
            bot.reply_to(message, f"‚ùå –®–∞–±–ª–æ–Ω '{name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@bot.message_handler(commands=['edittemplate'])
def edit_template(message):
    if not is_admin(message.from_user.id):
        bot.reply_to(message, "‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
        return

    try:
        parts = message.text.split('\n', 2)
        if len(parts) < 3:
            raise ValueError(
                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                "/edittemplate\n"
                "–Ω–∞–∑–≤–∞–Ω–∏–µ\n"
                "–Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç\n\n"
                "–ü—Ä–∏–º–µ—Ä:\n/edittemplate\n–∑–∏–º–Ω–∏–π\n–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞"
            )

        name = parts[1].strip()
        new_text = parts[2].strip()

        if templates_manager.edit_template(name, new_text):
            bot.reply_to(message, f"‚úÖ –®–∞–±–ª–æ–Ω '{name}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!")
        else:
            bot.reply_to(message, f"‚ùå –®–∞–±–ª–æ–Ω '{name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")

    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@bot.message_handler(commands=['deletetemplate'])
def delete_template(message):
    if not is_admin(message.from_user.id):
        bot.reply_to(message, "‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
        return

    try:
        name = message.text.split(' ', 1)[1].strip()
        if templates_manager.delete_template(name):
            bot.reply_to(message, f"‚úÖ –®–∞–±–ª–æ–Ω '{name}' —É–¥–∞–ª—ë–Ω!")
        else:
            bot.reply_to(message, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω '{name}'")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@bot.message_handler(commands=['listtemplates'])
def list_templates(message):
    templates = templates_manager.list_templates()
    response = "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã:\n\n" + "\n".join(f"‚Ä¢ {name}" for name in templates)
    bot.reply_to(message, response)


from telebot import types
from datetime import datetime

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
training_states = {}


@bot.message_handler(commands=['createtrain'])
def start_training_creation(message):
    if not is_admin(message.from_user.id):
        bot.reply_to(message, "‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤
    templates = templates_manager.list_templates()

    if not templates:
        bot.reply_to(message, "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —à–∞–±–ª–æ–Ω —á–µ—Ä–µ–∑ /addtemplate")
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —à–∞–±–ª–æ–Ω–∞–º–∏
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    for template in templates:
        markup.add(types.KeyboardButton(template))

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—ã–±–æ—Ä —à–∞–±–ª–æ–Ω–∞
    msg = bot.send_message(
        message.chat.id,
        "üìã –ö–∞–∫–æ–π —à–∞–±–ª–æ–Ω –≤—ã–±—Ä–∞—Ç—å?",
        reply_markup=markup
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    training_states[message.from_user.id] = {
        'step': 'select_template',
        'chat_id': message.chat.id
    }

    bot.register_next_step_handler(msg, process_template_selection)


def process_template_selection(message):
    user_id = message.from_user.id
    if user_id not in training_states:
        return

    template_name = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
    if template_name not in templates_manager.list_templates():
        bot.reply_to(message, "‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        del training_states[user_id]
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω
    training_states[user_id]['template_name'] = template_name
    training_states[user_id]['step'] = 'enter_date'

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞—Ç—É
    msg = bot.send_message(
        message.chat.id,
        "üìÖ –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 15.04.2025 19:30",
        reply_markup=types.ReplyKeyboardRemove()
    )

    bot.register_next_step_handler(msg, process_date_input)


def process_date_input(message):
    user_id = message.from_user.id
    if user_id not in training_states:
        return

    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
        train_date = datetime.strptime(message.text, '%d.%m.%Y %H:%M')
        if train_date < datetime.now():
            raise ValueError("–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É
        training_states[user_id]['date'] = train_date.strftime('%d.%m.%Y %H:%M')
        training_states[user_id]['step'] = 'confirm_creation'

        # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω
        template = templates_manager.get_template(training_states[user_id]['template_name'])

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (–ø–æ–∫–∞ –±–µ–∑ –¥–∞—Ç—ã)
        preview_text = template.format(
            date="[–¥–∞—Ç–∞ –±—É–¥–µ—Ç –∑–¥–µ—Å—å]",
            location="[–º–µ—Å—Ç–æ –∏–∑ —à–∞–±–ª–æ–Ω–∞]",
            details="[–¥–µ—Ç–∞–ª–∏ –∏–∑ —à–∞–±–ª–æ–Ω–∞]"
        ).replace("[–¥–∞—Ç–∞ –±—É–¥–µ—Ç –∑–¥–µ—Å—å]", training_states[user_id]['date'])

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton("‚úÖ –°–æ–∑–¥–∞—Ç—å"), types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é
        bot.send_message(
            message.chat.id,
            f"üìù –ü—Ä–µ–≤—å—é —Å–æ–æ–±—â–µ–Ω–∏—è:\n\n{preview_text}\n\n"
            "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:",
            reply_markup=markup
        )

    except ValueError as e:
        bot.reply_to(message, f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {str(e)}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        bot.register_next_step_handler(message, process_date_input)
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        del training_states[user_id]


@bot.message_handler(func=lambda m: training_states.get(m.from_user.id, {}).get('step') == 'confirm_creation')
def finalize_training_creation(message):
    try:
        state = training_states[message.from_user.id]
        template = templates_manager.get_template(state['template_name'])

        train_text = template.format(
            date=state['date'],
            location="[–º–µ—Å—Ç–æ –∏–∑ —à–∞–±–ª–æ–Ω–∞]",
            details="[–¥–µ—Ç–∞–ª–∏ –∏–∑ —à–∞–±–ª–æ–Ω–∞]"
        ) + "\n\n–°–ø–∏—Å–æ–∫ –∫—Ä–∞—Å–∞–≤—á–∏–∫–æ–≤:\n–ò–≥—Ä–æ–∫–∏:\n–í—Ä–∞—Ç–∞—Ä–∏:"

        markup = types.InlineKeyboardMarkup()
        markup.row(
            types.InlineKeyboardButton("–ò–≥—Ä–æ–∫", callback_data='train_role_player'),
            types.InlineKeyboardButton("–í—Ä–∞—Ç–∞—Ä—å", callback_data='train_role_goalie')
        )

        bot.send_message(
            chat_id=TRAINING_CHAT_ID,
            text=train_text,
            reply_markup=markup
        )

        bot.send_message(
            message.chat.id,
            f"‚úÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –ø–æ —à–∞–±–ª–æ–Ω—É '{state['template_name']}'!",
            reply_markup=types.ReplyKeyboardRemove()
        )

    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        if message.from_user.id in training_states:
            del training_states[message.from_user.id]

def is_admin(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    return user_id in ADMIN_IDS or gsheets.is_admin(user_id)


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤
@bot.message_handler(commands=['admin'])
def check_admin(message):
    if is_admin(message.from_user.id):
        bot.reply_to(message, "üõ° –í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!")
    else:
        bot.reply_to(message, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@bot.message_handler(commands=['addadmin'])
def add_admin(message):
    admin_id = message.from_user.id
    if not is_admin(admin_id):
        bot.reply_to(message, "‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
        return

    if not message.reply_to_message:
        bot.reply_to(message, "‚Ñπ –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
        return

    target_user_id = message.reply_to_message.from_user.id
    if gsheets.add_admin(admin_id, target_user_id):
        bot.reply_to(message, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.reply_to_message.from_user.username} —Ç–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!")
    else:
        bot.reply_to(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
@bot.message_handler(commands=['users'])
def list_users(message):
    if not is_admin(message.from_user.id):
        bot.reply_to(message, "‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
        return

    try:
        users = gsheets.worksheet.get_all_records()
        response = "üìä –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n"
        for user in users:
            admin_flag = " (admin)" if user.get('is_admin') == 'TRUE' else ""
            response += f"üë§ {user.get('full_name')}{admin_flag}\n"
        bot.reply_to(message, response)
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")


@bot.message_handler(commands=['removeadmin'])
def remove_admin(message):
    admin_id = message.from_user.id
    if not is_admin(admin_id):
        bot.reply_to(message, "‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
        return

    if not message.reply_to_message:
        bot.reply_to(message, "‚Ñπ –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–∂–∞–ª–æ–≤–∞—Ç—å")
        return

    target_user_id = message.reply_to_message.from_user.id

    # –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–µ–±—è
    if target_user_id == admin_id:
        bot.reply_to(message, "‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–Ω—è—Ç—å –ø—Ä–∞–≤–∞ —Å —Å–µ–±—è!")
        return

    # –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤
    if target_user_id in ADMIN_IDS:
        bot.reply_to(message, "‚ùå –≠—Ç–æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∫–∞–∑–∞–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞!")
        return

    if gsheets.remove_admin(admin_id, target_user_id):
        bot.reply_to(message, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.reply_to_message.from_user.username} –±–æ–ª—å—à–µ –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!")
    else:
        bot.reply_to(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–Ω—è—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")

@bot.message_handler(commands=['register'])
def handle_register(message):
    try:
        user = message.from_user

        if gsheets.is_user_exists(user.id):
            bot.reply_to(message, "‚ö†Ô∏è –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
            return

        # –ó–∞–ø—Ä–æ—Å –§–ò–û
        msg = bot.send_message(
            message.chat.id,
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –§–∞–º–∏–ª–∏—é –∏ –ò–º—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:",
            reply_markup=types.ForceReply()
        )
        bot.register_next_step_handler(msg, lambda m: save_registration(m, user))

    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")


def save_registration(message, user):
    try:
        full_name = message.text.strip()
        if len(full_name.split()) < 2:
            raise ValueError("–¢—Ä–µ–±—É–µ—Ç—Å—è –≤–≤–µ—Å—Ç–∏ –∏ –§–∞–º–∏–ª–∏—é –∏ –ò–º—è")

        if gsheets.add_record(user, full_name):
            bot.reply_to(message, f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:\nID: {user.id}\n–ò–º—è: {full_name}")
        else:
            bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏!")

    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")


@bot.callback_query_handler(func=lambda call: call.data.startswith('train_role_'))
def handle_training_button(call):
    try:
        user = call.from_user
        role = "–ò–≥—Ä–æ–∫" if call.data == 'train_role_player' else "–í—Ä–∞—Ç–∞—Ä—å"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        if not gsheets.is_user_exists(user.id):
            bot.answer_callback_query(
                call.id,
                "‚õî –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register",
                show_alert=True
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
        user_data = gsheets.get_user_record(user.id)
        if not user_data or not user_data.get('message'):
            bot.answer_callback_query(
                call.id,
                "‚ùå –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                show_alert=True
            )
            return

        user_message = user_data['message']

        # –†–∞–∑–±–∏—Ä–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        lines = call.message.text.split('\n')
        players = []
        goalies = []
        other_lines = []
        current_section = None

        for line in lines:
            if "–ò–≥—Ä–æ–∫–∏:" in line:
                current_section = "players"
                other_lines.append(line)
            elif "–í—Ä–∞—Ç–∞—Ä–∏:" in line:
                current_section = "goalies"
                other_lines.append(line)
            elif line.strip().startswith(('1.', '2.', '3.', '4.', '5.', '6.', '7.', '8.', '9.')):
                if current_section == "players":
                    players.append(line)
                elif current_section == "goalies":
                    goalies.append(line)
            else:
                other_lines.append(line)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
        all_participants = players + goalies
        if any(user_message in p for p in all_participants):
            bot.answer_callback_query(call.id, f"‚ö† –í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –∫–∞–∫ {role}!")
            return

        # –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –Ω—É–∂–Ω—ã–π —Å–ø–∏—Å–æ–∫
        if role == "–ò–≥—Ä–æ–∫":
            players.append(f"{len(players) + 1}. {user_message}")
        else:
            goalies.append(f"{len(goalies) + 1}. {user_message}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        new_text = []
        for line in other_lines:
            if line == "–ò–≥—Ä–æ–∫–∏:":
                new_text.append(line)
                new_text.extend(players)
            elif line == "–í—Ä–∞—Ç–∞—Ä–∏:":
                new_text.append(line)
                new_text.extend(goalies)
            else:
                new_text.append(line)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text='\n'.join(new_text),
            reply_markup=call.message.reply_markup
        )

        bot.answer_callback_query(call.id, f"‚úÖ –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –∫–∞–∫ {role}!")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")

@bot.message_handler(commands=['help'])
def show_help(message):
    help_text = """
üìã –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞–º–∏:

/addtemplate - –î–æ–±–∞–≤–∏—Ç—å —à–∞–±–ª–æ–Ω
/edittemplate - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω
/deletetemplate - –£–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω
/listtemplates - –°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤

üìå –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:
/createtrain [—à–∞–±–ª–æ–Ω]
–ø–∞—Ä–∞–º–µ—Ç—Ä: –∑–Ω–∞—á–µ–Ω–∏–µ
–ø–∞—Ä–∞–º–µ—Ç—Ä: –∑–Ω–∞—á–µ–Ω–∏–µ

–ü—Ä–∏–º–µ—Ä:
/createtrain –∑–∏–º–Ω–∏–π
date: 15.12.2025 18:00
location: –õ–µ–¥–æ–≤–∞—è –∞—Ä–µ–Ω–∞
details: –ö–æ–Ω—å–∫–∏, –ø–µ—Ä—á–∞—Ç–∫–∏
"""
    bot.reply_to(message, help_text)

if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥")
    bot.polling(none_stop=True)