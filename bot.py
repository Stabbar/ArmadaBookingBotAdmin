import os
import re
import threading
from threading import Timer

import telebot

from config import ADMIN_IDS, CONFIG_ADMINS, TELEGRAM_TOKEN, TRAINING_CHAT_ID_STAGING, TRAINING_CHAT_ID_TEST, \
    NOTIFICATION_TO, BIG_CHAT_ID_TEST, TRAINING_CHAT_ID_PROD, BIG_CHAT_ID_PROD
from gsheets import GoogleSheetsClient
from templates_manager import TemplatesManager

#TRAINING_CHAT_ID = TRAINING_CHAT_ID_TEST
#BIG_CHAT_ID = BIG_CHAT_ID_TEST
TRAINING_CHAT_ID = TRAINING_CHAT_ID_PROD
BIG_CHAT_ID = BIG_CHAT_ID_PROD
gsheets = GoogleSheetsClient()
bot = telebot.TeleBot(TELEGRAM_TOKEN)
templates_manager = TemplatesManager()

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–∞—Ç—ã
waiting_for_date = {}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
training_states = {}

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö
training_messages_store = {}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π
pending_reserve_confirmations = {}

def is_admin(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    return user_id in ADMIN_IDS or user_id in CONFIG_ADMINS

@bot.message_handler(commands=['addtemplate'])
def add_template(message):
    if not is_admin(message.from_user.id):
        bot.reply_to(message, "‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
        return

    try:
        parts = message.text.split('\n', 2)
        if len(parts) < 3:
            raise ValueError(
                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                "/addtemplate\n"
                "–Ω–∞–∑–≤–∞–Ω–∏–µ\n"
                "—Ç–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞\n\n"
                "–ü—Ä–∏–º–µ—Ä:\n/addtemplate\n–ª–µ—Ç–Ω–∏–π\n–õ–µ—Ç–Ω—è—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ {date}\n–ú–µ—Å—Ç–æ: {location}"
            )

        name = parts[1].strip()
        template_text = parts[2].strip()

        if templates_manager.add_template(name, template_text):
            bot.reply_to(message, f"‚úÖ –®–∞–±–ª–æ–Ω '{name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
        else:
            bot.reply_to(message, f"‚ùå –®–∞–±–ª–æ–Ω '{name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@bot.message_handler(commands=['edittemplate'])
def edit_template(message):
    if not is_admin(message.from_user.id):
        bot.reply_to(message, "‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
        return

    try:
        parts = message.text.split('\n', 2)
        if len(parts) < 3:
            raise ValueError(
                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                "/edittemplate\n"
                "–Ω–∞–∑–≤–∞–Ω–∏–µ\n"
                "–Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç\n\n"
                "–ü—Ä–∏–º–µ—Ä:\n/edittemplate\n–∑–∏–º–Ω–∏–π\n–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞"
            )

        name = parts[1].strip()
        new_text = parts[2].strip()

        if templates_manager.edit_template(name, new_text):
            bot.reply_to(message, f"‚úÖ –®–∞–±–ª–æ–Ω '{name}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!")
        else:
            bot.reply_to(message, f"‚ùå –®–∞–±–ª–æ–Ω '{name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")

    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@bot.message_handler(commands=['deletetemplate'])
def delete_template(message):
    if not is_admin(message.from_user.id):
        bot.reply_to(message, "‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
        return

    templates = templates_manager.list_templates()

    # –£–±–∏—Ä–∞–µ–º default –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    templates = [t for t in templates if t.lower() != 'default']

    if not templates:
        bot.reply_to(message, "‚ùå –ù–µ—Ç —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–∫—Ä–æ–º–µ –±–∞–∑–æ–≤–æ–≥–æ).")
        return

    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —à–∞–±–ª–æ–Ω–∞–º–∏
    markup = types.InlineKeyboardMarkup()
    for template in templates:
        markup.add(types.InlineKeyboardButton(
            text=template,
            callback_data=f"delete_template_{template}"
        ))

    bot.reply_to(
        message,
        "üìã –í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=markup
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ —É–¥–∞–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤
@bot.callback_query_handler(func=lambda call: call.data.startswith('delete_template_'))
def confirm_delete_template(call):
    template_name = call.data.replace('delete_template_', '')

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton("‚úÖ –î–∞", callback_data=f"confirm_delete_{template_name}"),
        types.InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="cancel_delete")
    )

    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω '{template_name}'?",
        reply_markup=markup
    )
    bot.answer_callback_query(call.id)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
@bot.callback_query_handler(func=lambda call: call.data.startswith('confirm_delete_'))
def execute_delete_template(call):
    template_name = call.data.replace('confirm_delete_', '')

    if templates_manager.delete_template(template_name):
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"‚úÖ –®–∞–±–ª–æ–Ω '{template_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!"
        )
    else:
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω '{template_name}'"
        )
    bot.answer_callback_query(call.id)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è
@bot.callback_query_handler(func=lambda call: call.data == "cancel_delete")
def cancel_delete_template(call):
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ"
    )
    bot.answer_callback_query(call.id)


@bot.message_handler(commands=['listtemplates'])
def list_templates(message):
    templates = templates_manager.list_templates()

    if not templates:
        bot.reply_to(message, "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤.")
        return

    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —à–∞–±–ª–æ–Ω–∞–º–∏
    markup = types.InlineKeyboardMarkup()
    for template in templates:
        markup.add(types.InlineKeyboardButton(text=template, callback_data=f"show_template_{template}"))

    bot.reply_to(message, "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã:", reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —à–∞–±–ª–æ–Ω–æ–≤
@bot.callback_query_handler(func=lambda call: call.data.startswith('show_template_'))
def show_template(call):
    template_name = call.data.replace('show_template_', '')
    try:
        template_content = templates_manager.get_template(template_name)
        bot.send_message(
            call.message.chat.id,
            f"üìù –®–∞–±–ª–æ–Ω: <b>{template_name}</b>\n\n{template_content}",
            parse_mode='HTML'
        )
        bot.answer_callback_query(call.id)
    except Exception as e:
        bot.answer_callback_query(call.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)


from telebot import types
from datetime import datetime

@bot.message_handler(commands=['createtrain'])
def start_training_creation(message):
    if not is_admin(message.from_user.id):
        bot.reply_to(message, "‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤
    templates = templates_manager.list_templates()

    if not templates:
        bot.reply_to(message, "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —à–∞–±–ª–æ–Ω —á–µ—Ä–µ–∑ /addtemplate")
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —à–∞–±–ª–æ–Ω–∞–º–∏
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    for template in templates:
        markup.add(types.KeyboardButton(template))

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—ã–±–æ—Ä —à–∞–±–ª–æ–Ω–∞
    msg = bot.send_message(
        message.chat.id,
        "üìã –ö–∞–∫–æ–π —à–∞–±–ª–æ–Ω –≤—ã–±—Ä–∞—Ç—å?",
        reply_markup=markup
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    training_states[message.from_user.id] = {
        'step': 'select_template',
        'chat_id': message.chat.id
    }

    bot.register_next_step_handler(msg, process_template_selection)


def process_template_selection(message):
    user_id = message.from_user.id
    if user_id not in training_states:
        return

    template_name = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
    if template_name not in templates_manager.list_templates():
        bot.reply_to(message, "‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        del training_states[user_id]
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω
    training_states[user_id]['template_name'] = template_name
    training_states[user_id]['step'] = 'enter_date'

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞—Ç—É
    msg = bot.send_message(
        message.chat.id,
        "üìÖ –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 15.04.2025 19:30",
        reply_markup=types.ReplyKeyboardRemove()
    )

    bot.register_next_step_handler(msg, process_date_input)


def process_player_limit(message):
    try:
        try:
            player_limit = int(message.text)
            if player_limit < 0:
                raise ValueError
        except ValueError:
            bot.reply_to(message, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ ‚â• 0")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–∏–º–∏—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        training_states[message.from_user.id]['player_limit'] = player_limit

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        msg = bot.reply_to(message,
                           "üìù –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–æ–≤ —Å—Ä–∞–∑—É? –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –§–ò–û (–∫–∞–∂–¥–æ–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏)\n"
                           "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '0' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥")
        bot.register_next_step_handler(msg, process_players_list)

    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        del training_states[message.from_user.id]


def process_players_list(message):
    try:
        user_id = message.from_user.id
        if user_id not in training_states:
            return

        state = training_states[user_id]

        # –ï—Å–ª–∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤
        if message.text.strip() == '0':
            return finalize_training_creation(message)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
        players_list = []
        unregistered_players = []

        for line in message.text.split('\n'):
            if not line.strip():
                continue

            # –û—á–∏—â–∞–µ–º –§–ò–û –æ—Ç –Ω—É–º–µ—Ä–∞—Ü–∏–∏ (1., 2. –∏ —Ç.–¥.) –∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤
            clean_line = re.sub(r'^\d+\.?\s*', '', line.strip())  # –£–¥–∞–ª—è–µ–º –Ω—É–º–µ—Ä–∞—Ü–∏—é
            clean_name = re.sub(r'[^a-zA-Z–∞-—è–ê-–Ø—ë–Å\s]', '', clean_line).strip()

            if not clean_name:
                continue

            # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data = gsheets.find_user_by_name(clean_name)
            if not user_data or not user_data.get('user_id'):
                unregistered_players.append(clean_name)
                continue

            players_list.append({
                'name': clean_name,
                'user_id': user_data['user_id']
            })

        # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∏
        if unregistered_players:
            error_msg = "‚ùå –≠—Ç–∏ –∏–≥—Ä–æ–∫–∏ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã:\n" + "\n".join(unregistered_players)
            bot.reply_to(message, error_msg)
            return None

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        state['predefined_players'] = players_list

        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        finalize_training_creation(message)

    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        if user_id in training_states:
            del training_states[user_id]

def process_date_input(message):
    user_id = message.from_user.id
    if user_id not in training_states:
        return

    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
        train_date = datetime.strptime(message.text, '%d.%m.%Y %H:%M')
        if train_date < datetime.now():
            raise ValueError("–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É
        training_states[user_id]['date'] = train_date.strftime('%d.%m.%Y %H:%M')
        training_states[user_id]['step'] = 'confirm_creation'

        # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω
        template = templates_manager.get_template(training_states[user_id]['template_name'])

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (–ø–æ–∫–∞ –±–µ–∑ –¥–∞—Ç—ã)
        preview_text = template.format(
            date="[–¥–∞—Ç–∞ –±—É–¥–µ—Ç –∑–¥–µ—Å—å]",
            location="[–º–µ—Å—Ç–æ –∏–∑ —à–∞–±–ª–æ–Ω–∞]",
            details="[–¥–µ—Ç–∞–ª–∏ –∏–∑ —à–∞–±–ª–æ–Ω–∞]"
        ).replace("[–¥–∞—Ç–∞ –±—É–¥–µ—Ç –∑–¥–µ—Å—å]", training_states[user_id]['date'])

        msg = bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ (—á–∏—Å–ª–æ –∏–ª–∏ 0 –±–µ–∑ –ª–∏–º–∏—Ç–∞):")
        bot.register_next_step_handler(msg, process_player_limit)

    except ValueError as e:
        bot.reply_to(message, f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {str(e)}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        bot.register_next_step_handler(message, process_date_input)
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ª–∏–º–∏—Ç–æ–≤: {str(e)}")
        del training_states[user_id]

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton("‚úÖ –°–æ–∑–¥–∞—Ç—å"), types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é
        bot.send_message(
            message.chat.id,
            f"üìù –ü—Ä–µ–≤—å—é —Å–æ–æ–±—â–µ–Ω–∏—è:\n\n{preview_text}\n\n"
            "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:",
            reply_markup=markup
        )


@bot.message_handler(func=lambda m: training_states.get(m.from_user.id, {}).get('step') == 'confirm_creation')
def finalize_training_creation(message):
    try:
        if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
            bot.send_message(
                message.chat.id,
                "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ",
                reply_markup=types.ReplyKeyboardRemove()
            )
            del training_states[message.from_user.id]
            return

        state = training_states[message.from_user.id]
        template = templates_manager.get_template(state['template_name'])

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        train_text = template.format(
            date=state['date'],
            location="[–º–µ—Å—Ç–æ –∏–∑ —à–∞–±–ª–æ–Ω–∞]",
            details="[–¥–µ—Ç–∞–ª–∏ –∏–∑ —à–∞–±–ª–æ–Ω–∞]"
        ) + f"\n\n–õ–∏–º–∏—Ç –∏–≥—Ä–æ–∫–æ–≤: {state.get('player_limit', 0)}\n\n–°–ø–∏—Å–æ–∫:\n–ò–≥—Ä–æ–∫–∏:\n–í—Ä–∞—Ç–∞—Ä–∏:\n–†–µ–∑–µ—Ä–≤:"

        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
        if 'predefined_players' in state:
            players = []
            for player in state['predefined_players']:
                players.append(f"{len(players) + 1}. {player['name']}")
                gsheets.update_attendance(
                    player['user_id'],
                    datetime.strptime(state['date'], '%d.%m.%Y %H:%M').date(),
                    present=True,
                    role='player'
                )

            train_text = train_text.replace("–ò–≥—Ä–æ–∫–∏:", f"–ò–≥—Ä–æ–∫–∏:\n" + "\n".join(players))

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–µ–¥–∑–∞–ø–∏—Å–∏
        markup = types.InlineKeyboardMarkup()
        markup.row(
            types.InlineKeyboardButton("–ò–≥—Ä–æ–∫", callback_data='train_role_player'),
            types.InlineKeyboardButton("–í—Ä–∞—Ç–∞—Ä—å", callback_data='train_role_goalie')
        )
        markup.row(
            types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data='train_cancel'),
            types.InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–µ–¥–∑–∞–ø–∏—Å—å", callback_data='finish_prereg')
        )

        # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–ø–∏—Å–∏
        sent_message = bot.send_message(
            chat_id=TRAINING_CHAT_ID,
            text=train_text,
            reply_markup=markup
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        state['pre_reg_message_id'] = sent_message.message_id
        store_training_message(sent_message)

        bot.send_message(
            message.chat.id,
            f"‚úÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –ø–æ —à–∞–±–ª–æ–Ω—É '{state['template_name']}'!",
            reply_markup=types.ReplyKeyboardRemove()
        )

    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        if message.from_user.id in training_states:
            del training_states[message.from_user.id]


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–µ–¥–∑–∞–ø–∏—Å–∏
@bot.callback_query_handler(func=lambda call: call.data == 'finish_prereg')
def handle_finish_preregistration(call):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not is_admin(call.from_user.id):
            bot.answer_callback_query(call.id, "‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏ –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        message_text = call.message.text
        date_match = re.search(r'(\d{2}\.\d{2}\.\d{4})', message_text)
        if not date_match:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–∞—Ç—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏")

        date_str = date_match.group(1)

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —á–∞—Ç–∞
        markup = types.InlineKeyboardMarkup()
        markup.row(
            types.InlineKeyboardButton("–ò–≥—Ä–æ–∫", callback_data='train_role_player'),
            types.InlineKeyboardButton("–í—Ä–∞—Ç–∞—Ä—å", callback_data='train_role_goalie')
        )
        markup.row(
            types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data='train_cancel')
        )

        # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —á–∞—Ç–µ
        new_message = bot.send_message(
            chat_id=BIG_CHAT_ID,
            text=message_text,
            reply_markup=markup
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        store_training_message(new_message)

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–ø–∏—Å–∏
        bot.delete_message(
            chat_id=TRAINING_CHAT_ID,
            message_id=call.message.message_id
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ - —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if date_str in training_messages_store:
            training_messages_store[date_str] = [
                msg for msg in training_messages_store[date_str]
                if msg['message_id'] != call.message.message_id
            ]

        bot.answer_callback_query(call.id, "‚úÖ –ü—Ä–µ–¥–∑–∞–ø–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–µ–¥–∑–∞–ø–∏—Å–∏: {e}")
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–µ–¥–∑–∞–ø–∏—Å–∏")

@bot.message_handler(func=lambda m: m.chat.id == TRAINING_CHAT_ID and "—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞" in m.text.lower())
def handle_training_message(message):
    """–ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö"""
    store_training_message(message)


@bot.callback_query_handler(func=lambda call: call.data == 'train_cancel')
def handle_cancel_registration(call):
    global training_date
    try:
        # 1. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user = call.from_user
        user_data = gsheets.get_user_record(user.id)

        if not user_data or not user_data.get('message'):
            bot.answer_callback_query(call.id, "‚ùå –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
            return

        user_message = user_data['message']
        message_id = call.message.message_id
        chat_id = call.message.chat.id

        # 2. –†–∞–∑–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ
        lines = call.message.text.split('\n')
        players = []
        reserves = []
        goalies = []
        other_lines = []
        current_section = None
        found_in_players = False
        found_in_reserves = False
        found_in_goalies = False
        player_number = None
        player_limit = 0

        # 3. –ü–∞—Ä—Å–∏–º –ª–∏–º–∏—Ç –∏–≥—Ä–æ–∫–æ–≤
        for line in lines:
            if "–õ–∏–º–∏—Ç –∏–≥—Ä–æ–∫–æ–≤:" in line:
                try:
                    player_limit = int(line.split(":")[1].strip())
                except:
                    player_limit = 0
                break

        # 4. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        for line in lines:
            if "–ò–≥—Ä–æ–∫–∏:" in line:
                current_section = "players"
                other_lines.append(line)
            elif "–†–µ–∑–µ—Ä–≤:" in line:
                current_section = "reserves"
                other_lines.append(line)
            elif "–í—Ä–∞—Ç–∞—Ä–∏:" in line:
                current_section = "goalies"
                other_lines.append(line)
            elif line.strip().startswith(('1.', '2.', '3.', '4.', '5.', '6.', '7.', '8.', '9.')):
                if user_message in line:
                    # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –Ω–æ–º–µ—Ä –∏–≥—Ä–æ–∫–∞
                    player_number = line.split('.')[0].strip()
                    if current_section == "players":
                        found_in_players = True
                    elif current_section == "reserves":
                        found_in_reserves = True
                    elif current_section == "goalies":
                        found_in_goalies = True
                    continue

                if current_section == "players":
                    players.append(line)
                elif current_section == "reserves":
                    reserves.append(line)
                elif current_section == "goalies":
                    goalies.append(line)
            else:
                other_lines.append(line)

        # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø–∏—Å–∞–Ω
        if not (found_in_players or found_in_reserves or found_in_goalies):
            bot.answer_callback_query(call.id, "‚ö† –í—ã –Ω–µ –±—ã–ª–∏ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", show_alert=True)
            return

        # 6. –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        for line in call.message.text.split('\n'):
            if '—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞' in line.lower():
                date_str = line.split('—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞')[1].strip().split()[0]
                training_date = datetime.strptime(date_str, '%d.%m.%Y')
                break

        # 7. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –æ—Ç–º–µ–Ω—ã
        if found_in_players and reserves:
            # –°—Ü–µ–Ω–∞—Ä–∏–π 1: –û—Ç–º–µ–Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ —Å —Ä–µ–∑–µ—Ä–≤–æ–º
            training_info = {
                'original_message_id': message_id,
                'chat_id': chat_id,
                'training_date': training_date,
                'players_list': players,
                'reserves_list': reserves,
                'goalies_list': goalies,
                'other_lines': other_lines,
                'player_limit': player_limit,
                'reply_markup': call.message.reply_markup
            }
            send_reserve_confirmation(training_info, reserves[0], 0)

            # –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π (–∂–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)
            new_text = []
            for line in other_lines:
                if line == "–ò–≥—Ä–æ–∫–∏:":
                    new_text.append(line)
                    new_text.extend(players)
                elif line == "–†–µ–∑–µ—Ä–≤:":
                    new_text.append(line)
                    new_text.extend(reserves)
                elif line == "–í—Ä–∞—Ç–∞—Ä–∏:":
                    new_text.append(line)
                    new_text.extend(goalies)
                else:
                    new_text.append(line)
        else:
            # –°—Ü–µ–Ω–∞—Ä–∏–π 2: –ù–µ—Ç —Ä–µ–∑–µ—Ä–≤–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω—è–µ—Ç –Ω–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∏–≥—Ä–æ–∫
            # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Å–ø–∏—Å–∫–∏ –±–µ–∑ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω—É–º–µ—Ä–∞—Ü–∏—é
            players_renumbered = []
            for i, player in enumerate(players, 1):
                parts = player.split('.', 1)
                players_renumbered.append(f"{i}.{parts[1]}")

            reserves_renumbered = []
            for i, reserve in enumerate(reserves, 1):
                parts = reserve.split('.', 1)
                reserves_renumbered.append(f"{i}.{parts[1]}")

            goalies_renumbered = []
            for i, goalie in enumerate(goalies, 1):
                parts = goalie.split('.', 1)
                goalies_renumbered.append(f"{i}.{parts[1]}")

            # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            new_text = []
            for line in other_lines:
                if line == "–ò–≥—Ä–æ–∫–∏:":
                    new_text.append(line)
                    new_text.extend(players_renumbered)
                elif line == "–†–µ–∑–µ—Ä–≤:":
                    new_text.append(line)
                    new_text.extend(reserves_renumbered)
                elif line == "–í—Ä–∞—Ç–∞—Ä–∏:":
                    new_text.append(line)
                    new_text.extend(goalies_renumbered)
                else:
                    new_text.append(line)

        # 8. –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ
        bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text='\n'.join(new_text),
            reply_markup=call.message.reply_markup
        )

        # 9. –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å
        gsheets.update_attendance(user.id, training_date, present=False)

        # 10. –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot.answer_callback_query(call.id, "‚úÖ –í–∞—à–∞ –∑–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞!")

        player_name = user_data.get('message', user_data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–≥—Ä–æ–∫'))
        section_name = '–æ—Å–Ω–æ–≤–Ω–æ–º —Å–æ—Å—Ç–∞–≤–µ' if found_in_players else '—Ä–µ–∑–µ—Ä–≤–µ' if found_in_reserves else '–≤—Ä–∞—Ç–∞—Ä—è—Ö'

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –Ω–æ–º–µ—Ä–æ–º –∏–≥—Ä–æ–∫–∞
        notification_text = (
            f"‚ö†Ô∏è –ò–≥—Ä–æ–∫ –æ—Ç–º–µ–Ω–∏–ª –∑–∞–ø–∏—Å—å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É\n"
            f"–î–∞—Ç–∞: {training_date.strftime('%d.%m.%Y')}\n"
            f"–ò–≥—Ä–æ–∫: {player_name}\n"
            f"–ë—ã–ª –≤: {section_name}\n"
            f"–ù–æ–º–µ—Ä –≤ —Å–ø–∏—Å–∫–µ: {player_number}"  # –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–º–µ—Ä –∏–≥—Ä–æ–∫–∞
        )
        send_admin_notification(notification_text)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")


def send_reserve_confirmation(training_info, reserve_player, reserve_index):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–∏—Å—Ç—É"""
    try:
        # –£–¥–∞–ª—è–µ–º "(—Ä–µ–∑–µ—Ä–≤)" –∏–∑ –∏–º–µ–Ω–∏ –∏–≥—Ä–æ–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–∏—Å–∫–æ–º
        clean_player_name = reserve_player.split('.', 1)[1].strip().replace('(—Ä–µ–∑–µ—Ä–≤)', '').strip()
        reserve_user_id = gsheets.get_user_id_by_name(clean_player_name)

        if not reserve_user_id:
            print(f"–ù–µ –Ω–∞–π–¥–µ–Ω user_id –¥–ª—è —Ä–µ–∑–µ—Ä–≤–∏—Å—Ç–∞: {clean_player_name}")
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        markup = types.InlineKeyboardMarkup()
        confirm_btn = types.InlineKeyboardButton(
            text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–µ—Ä–µ—Ö–æ–¥",
            callback_data=f"reserve_confirm_{training_info['original_message_id']}"
        )
        markup.add(confirm_btn)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        sent_msg = bot.send_message(
            reserve_user_id,
            f"–í—ã –ø–µ—Ä–≤—ã–π –≤ —Ä–µ–∑–µ—Ä–≤–µ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É {training_info['training_date'].strftime('%d.%m.%Y')}.\n"
            "–•–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–æ—Å—Ç–∞–≤?",
            reply_markup=markup
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–µ
        pending_reserve_confirmations[training_info['original_message_id']] = {
            'training_info': training_info,
            'reserve_index': reserve_index,
            'reserve_user_id': reserve_user_id,
            'reserve_player_name': clean_player_name,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—á–∏—â–µ–Ω–Ω–æ–µ –∏–º—è
            'confirmation_msg_id': sent_msg.message_id,
            'timestamp': datetime.now()
        }

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ 1 —á–∞—Å
        Timer(3600, check_reserve_confirmation, [training_info['original_message_id']]).start()

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–∏—Å—Ç—É: {e}")


def check_reserve_confirmation(message_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 1 —á–∞—Å"""
    if message_id not in pending_reserve_confirmations:
        return

    confirmation_data = pending_reserve_confirmations[message_id]
    training_info = confirmation_data['training_info']
    reserve_index = confirmation_data['reserve_index']

    # –ï—Å–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–µ –±—ã–ª–æ, –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–µ–∑–µ—Ä–≤–∏—Å—Ç–∞
    if len(training_info['reserves_list']) > reserve_index + 1:
        send_reserve_confirmation(training_info, training_info['reserves_list'][reserve_index + 1], reserve_index + 1)

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∑–∞–ø—Ä–æ—Å
    pending_reserve_confirmations.pop(message_id, None)


@bot.callback_query_handler(func=lambda call: call.data.startswith('reserve_confirm_'))
def handle_reserve_confirmation(call):
    try:
        message_id = int(call.data.split('_')[-1])
        if message_id not in pending_reserve_confirmations:
            bot.answer_callback_query(call.id, "‚ùå –ó–∞–ø—Ä–æ—Å —É—Å—Ç–∞—Ä–µ–ª")
            return

        confirmation_data = pending_reserve_confirmations.pop(message_id)
        training_info = confirmation_data['training_info']
        reserve_player = training_info['reserves_list'][confirmation_data['reserve_index']]
        reserve_user_id = confirmation_data['reserve_user_id']

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏
        players = training_info['players_list']
        reserves = training_info['reserves_list']

        # –£–¥–∞–ª—è–µ–º –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–æ—Å—Ç–∞–≤
        reserves.pop(confirmation_data['reserve_index'])
        players.append(f"{len(players) + 1}. {reserve_player.split('.', 1)[1].strip().replace('(—Ä–µ–∑–µ—Ä–≤)', '')}")

        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω—É–º–µ—Ä–∞—Ü–∏—é
        players_renumbered = [f"{i}.{p.split('.', 1)[1]}" for i, p in enumerate(players, 1)]
        reserves_renumbered = [f"{i}.{r.split('.', 1)[1]}" for i, r in enumerate(reserves, 1)]

        # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        new_text = []
        for line in training_info['other_lines']:
            if line == "–ò–≥—Ä–æ–∫–∏:":
                new_text.append(line)
                new_text.extend(players_renumbered)
            elif line == "–†–µ–∑–µ—Ä–≤:":
                new_text.append(line)
                new_text.extend(reserves_renumbered)
            elif line == "–í—Ä–∞—Ç–∞—Ä–∏:":
                new_text.append(line)
                new_text.extend(training_info['goalies_list'])
            else:
                new_text.append(line)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ
        bot.edit_message_text(
            chat_id=training_info['chat_id'],
            message_id=training_info['original_message_id'],
            text='\n'.join(new_text),
            reply_markup=training_info['reply_markup']
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å
        gsheets.update_attendance(
            reserve_user_id,
            training_info['training_date'],
            present=True,
            role='player'
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–µ–∑–µ—Ä–≤–∏—Å—Ç–∞
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="‚úÖ –í—ã –±—ã–ª–∏ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–æ—Å—Ç–∞–≤!"
        )

        notification_text = (
            f"üîÑ –ò–≥—Ä–æ–∫ –ø–µ—Ä–µ—à–µ–ª –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–æ—Å—Ç–∞–≤\n"
            f"–î–∞—Ç–∞: {training_info['training_date'].strftime('%d.%m.%Y')}\n"
            f"–ò–≥—Ä–æ–∫: {reserve_player}"
        )
        send_admin_notification(notification_text)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")


def store_training_message(message):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ —Å —É—á–µ—Ç–æ–º —á–∞—Ç–∞"""
    try:
        date_match = re.search(r'(\d{2}\.\d{2}\.\d{4})', message.text)
        if date_match:
            date_str = date_match.group(1)
            if date_str not in training_messages_store:
                training_messages_store[date_str] = []

            training_messages_store[date_str].append({
                'chat_id': message.chat.id,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —á–∞—Ç–∞
                'message_id': message.message_id,
                'text': message.text
            })
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


def find_training_message(chat_id, training_date):
    """–ò—â–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ –ø–æ –¥–∞—Ç–µ –≤ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞"""
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø–æ–∏—Å–∫–∞ (–¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è)
        search_date = training_date.strftime('%d.%m.%Y')

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å–æ–æ–±—â–µ–Ω–∏–π (–º–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
        messages = bot.get_chat_history(chat_id, limit=100)

        for msg in messages:
            if msg.text and search_date in msg.text and "—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞" in msg.text.lower():
                return {
                    'chat_id': chat_id,
                    'message_id': msg.message_id,
                    'text': msg.text
                }
        return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return None


def find_all_training_messages(chat_id, training_date):
    """–ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ (–æ—Å–Ω–æ–≤–Ω–æ–µ –∏ –≤–æ–∑–º–æ–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è)"""
    try:
        search_date = training_date.strftime('%d.%m.%Y')
        messages = bot.get_chat_history(chat_id, limit=200)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç
        result = []

        for msg in messages:
            if msg.text and search_date in msg.text and "—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞" in msg.text.lower():
                result.append({
                    'chat_id': chat_id,
                    'message_id': msg.message_id,
                    'text': msg.text
                })
        return result
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        return []


def is_training_message(msg, training_date):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É"""
    if not msg.text:
        return False

    date_str = training_date.strftime('%d.%m.%Y')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω—É–∂–Ω—É—é –¥–∞—Ç—É
    return ("—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞" in msg.text.lower() and
            date_str in msg.text and
            any(word in msg.text.lower() for word in ["—Å–ø–∏—Å–æ–∫", "–∏–≥—Ä–æ–∫–∏", "–≤—Ä–∞—Ç–∞—Ä–∏"]))



@bot.message_handler(commands=['canceltrain'])
def start_cancel_training(message):
    if not is_admin(message.from_user.id):
        bot.reply_to(message, "‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
        return

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞—Ç—É —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    msg = bot.reply_to(message, "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    bot.register_next_step_handler(msg, process_cancel_date)


def process_cancel_date(message):
    try:
        user_id = message.from_user.id
        if not is_admin(user_id):
            bot.reply_to(message, "‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
            return

        date_str = message.text.strip()
        training_date = datetime.strptime(date_str, '%d.%m.%Y').date()
        current_date = datetime.now().date()

        if training_date <= current_date:
            bot.reply_to(message, "‚ùå –ú–æ–∂–Ω–æ –æ—Ç–º–µ–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ –±—É–¥—É—â–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏!")
            return

        # 1. –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        messages_to_delete = training_messages_store.get(date_str, [])
        success_count = 0

        for msg_data in messages_to_delete:
            try:
                bot.delete_message(msg_data['chat_id'], msg_data['message_id'])
                success_count += 1
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {msg_data['message_id']}: {e}")

        # 2. –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
        if gsheets.cancel_training(training_date):
            result_msg = f"‚õîÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞ {date_str} –æ—Ç–º–µ–Ω–µ–Ω–∞!"
            if success_count < len(messages_to_delete):
                result_msg += f"\n(–£–¥–∞–ª–µ–Ω–æ {success_count} –∏–∑ {len(messages_to_delete)} —Å–æ–æ–±—â–µ–Ω–∏–π)"
            bot.reply_to(message, result_msg)
        else:
            bot.reply_to(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –≤ —Ç–∞–±–ª–∏—Ü–µ –∏–ª–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞–ø–∏—Å–∞–ª—Å—è")

    except ValueError as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã: {e}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
        # –ü–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞—Ç—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
        msg = bot.reply_to(message, "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
        bot.register_next_step_handler(msg, process_cancel_date)
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤
@bot.message_handler(commands=['admin'])
def check_admin(message):
    if is_admin(message.from_user.id):
        bot.reply_to(message, "üõ° –í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!")
    else:
        bot.reply_to(message, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")


def update_admin_ids(new_admin_id):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –º–∞—Å—Å–∏–≤ ADMIN_IDS –≤ config.py
    :param new_admin_id: ID –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    :return: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
    """
    try:
        # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª config.py
        with open('config.py', 'r', encoding='utf-8') as f:
            content = f.read()

        # –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É —Å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ–º ADMIN_IDS
        pattern = r'ADMIN_IDS\s*=\s*\[([^\]]*)\]'
        match = re.search(pattern, content)

        if not match:
            raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ ADMIN_IDS –≤ config.py")

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ ID
        current_ids = [int(id_.strip()) for id_ in match.group(1).split(',') if id_.strip()]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç ID
        if new_admin_id in current_ids:
            return True  # –£–∂–µ –µ—Å—Ç—å, —Å—á–∏—Ç–∞–µ–º —É—Å–ø–µ—Ö–æ–º

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π ID
        current_ids.append(new_admin_id)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
        new_ids_str = ', '.join(str(id_) for id_ in current_ids)
        new_content = re.sub(pattern, f'ADMIN_IDS = [{new_ids_str}]', content)

        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∑–∞–ø–∏—Å–∏
        temp_file = 'config_temp.py'
        with open(temp_file, 'w', encoding='utf-8') as f:
            f.write(new_content)

        # –ó–∞–º–µ–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
        os.replace(temp_file, 'config.py')

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –º–∞—Å—Å–∏–≤ ADMIN_IDS
        global ADMIN_IDS
        ADMIN_IDS = current_ids

        return True

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ ADMIN_IDS: {e}")
        return False


@bot.message_handler(commands=['addadmin'])
def add_admin_command(message):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã"""
    if not is_admin(message.from_user.id):
        bot.reply_to(message, "‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
        return

    if not message.reply_to_message:
        bot.reply_to(message, "‚Ñπ –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
        return

    target_user = message.reply_to_message.from_user
    target_user_id = target_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    if target_user_id == message.from_user.id:
        bot.reply_to(message, "‚ùå –í—ã —É–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!")
        return

    if target_user_id in ADMIN_IDS:
        bot.reply_to(message, f"‚Ñπ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{target_user.username} —É–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
        return

    if target_user_id in CONFIG_ADMINS:
        bot.reply_to(message, "‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —Å–∏—Å—Ç–µ–º–Ω—ã–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
        return

    try:
        if update_admin_ids(target_user_id):
            bot.reply_to(message, f"‚úÖ @{target_user.username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã!\n")
        else:
            bot.reply_to(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")

    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
@bot.message_handler(commands=['users'])
def list_users(message):
    if not is_admin(message.from_user.id):
        bot.reply_to(message, "‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
        return

    try:
        users = gsheets.worksheet.get_all_records()
        response = "üìä –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n"
        for user in users:
            admin_flag = " (admin)" if user.get('is_admin') == 'TRUE' else ""
            response += f"üë§ {user.get('full_name')}{admin_flag}\n"
        bot.reply_to(message, response)
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")


def remove_admin_from_config(admin_id):
    """
    –£–¥–∞–ª—è–µ—Ç admin_id –∏–∑ –º–∞—Å—Å–∏–≤–∞ ADMIN_IDS –≤ config.py
    :param admin_id: ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    :return: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
    """
    try:
        # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª config.py
        with open('config.py', 'r', encoding='utf-8') as f:
            content = f.read()

        # –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É —Å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ–º ADMIN_IDS
        pattern = r'ADMIN_IDS\s*=\s*\[([^\]]*)\]'
        match = re.search(pattern, content)

        if not match:
            raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ ADMIN_IDS –≤ config.py")

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ ID (–∏—Å–∫–ª—é—á–∞—è —É–¥–∞–ª—è–µ–º—ã–π)
        current_ids = [int(id_.strip()) for id_ in match.group(1).split(',') if
                       id_.strip() and int(id_.strip()) != admin_id]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —ç—Ç–æ—Ç ID –≤ —Å–ø–∏—Å–∫–µ
        if len(current_ids) == len([int(id_.strip()) for id_ in match.group(1).split(',') if id_.strip()]):
            return False  # ID –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ

        # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
        new_ids_str = ', '.join(str(id_) for id_ in current_ids)
        new_content = re.sub(pattern, f'ADMIN_IDS = [{new_ids_str}]', content)

        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∑–∞–ø–∏—Å–∏
        temp_file = 'config_temp.py'
        with open(temp_file, 'w', encoding='utf-8') as f:
            f.write(new_content)

        # –ó–∞–º–µ–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
        os.replace(temp_file, 'config.py')

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –º–∞—Å—Å–∏–≤ ADMIN_IDS
        global ADMIN_IDS
        ADMIN_IDS = current_ids

        return True

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ ADMIN_IDS: {e}")
        return False


@bot.message_handler(commands=['removeadmin'])
def remove_admin_command(message):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    if not is_admin(message.from_user.id):
        bot.reply_to(message, "‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
        return

    if not message.reply_to_message:
        bot.reply_to(message, "‚Ñπ –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–∂–∞–ª–æ–≤–∞—Ç—å")
        return

    target_user = message.reply_to_message.from_user
    target_user_id = target_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    if target_user_id == message.from_user.id:
        bot.reply_to(message, "‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–Ω—è—Ç—å –ø—Ä–∞–≤–∞ —Å —Å–µ–±—è!")
        return

    if target_user_id not in ADMIN_IDS:
        bot.reply_to(message, f"‚Ñπ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{target_user.username} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
        return

    if target_user_id in CONFIG_ADMINS:
        bot.reply_to(message, "‚ùå –≠—Ç–æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∫–∞–∑–∞–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞!")
        return

    try:
        if remove_admin_from_config(target_user_id):
            bot.reply_to(message, f"‚úÖ @{target_user.username} –±–æ–ª—å—à–µ –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!")
        else:
            bot.reply_to(message, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{target_user.username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")

    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@bot.message_handler(commands=['register'])
def handle_register(message):
    try:
        user = message.from_user

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        if gsheets.is_user_exists(user.id):
            reply = bot.reply_to(message, "‚ö†Ô∏è –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
            # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö
            if message.chat.type != 'private':
                threading.Timer(300, lambda: bot.delete_message(message.chat.id, reply.message_id)).start()
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —á–∞—Ç–∞
        if message.chat.type != 'private':
            markup = types.InlineKeyboardMarkup()
            url_button = types.InlineKeyboardButton(
                text="–ü–µ—Ä–µ–π—Ç–∏ –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç —Å –±–æ—Ç–æ–º",
                url=f"tg://resolve?domain={bot.get_me().username}"
            )
            markup.add(url_button)

            sent_msg = bot.reply_to(
                message,
                "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º",
                reply_markup=markup
            )
            # –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö
            threading.Timer(300, lambda: bot.delete_message(message.chat.id, sent_msg.message_id)).start()
            return

        # –ü—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –õ–°
        msg = bot.send_message(
            message.chat.id,
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –§–∞–º–∏–ª–∏—é –∏ –ò–º—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:",
            reply_markup=types.ForceReply()
        )
        bot.register_next_step_handler(msg, lambda m: save_registration(m, user))
        gsheets.clear_cache()

    except Exception as e:
        error_msg = bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")
        # –£–¥–∞–ª—è–µ–º –æ—à–∏–±–∫—É —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö
        if message.chat.type != 'private':
            threading.Timer(300, lambda: bot.delete_message(message.chat.id, error_msg.message_id)).start()


def save_registration(message, user):
    try:
        full_name = message.text.strip()
        if len(full_name.split()) < 2:
            error_msg = bot.reply_to(message, "‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–≤–µ—Å—Ç–∏ –∏ –§–∞–º–∏–ª–∏—é –∏ –ò–º—è")
            # –°–æ–æ–±—â–µ–Ω–∏—è –≤ –õ–° –Ω–µ —É–¥–∞–ª—è–µ–º
            if message.chat.type != 'private':
                threading.Timer(300, lambda: bot.delete_message(message.chat.id, error_msg.message_id)).start()
            return

        if gsheets.add_record(user, full_name):
            bot.reply_to(message, f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:\n–ò–º—è: {full_name}")
        else:
            error_msg = bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏!")
            if message.chat.type != 'private':
                threading.Timer(300, lambda: bot.delete_message(message.chat.id, error_msg.message_id)).start()

    except Exception as e:
        error_msg = bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")
        if message.chat.type != 'private':
            threading.Timer(300, lambda: bot.delete_message(message.chat.id, error_msg.message_id)).start()

@bot.callback_query_handler(func=lambda call: call.data.startswith('train_role_'))
def handle_training_button(call):
    global training_date
    try:
        user = call.from_user
        role = "–ò–≥—Ä–æ–∫" if call.data == 'train_role_player' else "–í—Ä–∞—Ç–∞—Ä—å"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        if not gsheets.is_user_exists(user.id):
            bot.answer_callback_query(
                call.id,
                "‚õî –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register",
                show_alert=True
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
        user_data = gsheets.get_user_record(user.id)
        if not user_data or not user_data.get('message'):
            bot.answer_callback_query(
                call.id,
                "‚ùå –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                show_alert=True
            )
            return

        user_message = user_data['message']

        # –†–∞–∑–±–∏—Ä–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        lines = call.message.text.split('\n')
        players = []
        reserves = []
        goalies = []
        other_lines = []
        current_section = None
        player_limit = 0

        # –ü–∞—Ä—Å–∏–º –ª–∏–º–∏—Ç –∏–≥—Ä–æ–∫–æ–≤
        for line in lines:
            if "–õ–∏–º–∏—Ç –∏–≥—Ä–æ–∫–æ–≤:" in line:
                try:
                    player_limit = int(line.split(":")[1].strip())
                except:
                    player_limit = 0
                break

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        for line in lines:
            if "–ò–≥—Ä–æ–∫–∏:" in line:
                current_section = "players"
                other_lines.append(line)
            elif "–†–µ–∑–µ—Ä–≤:" in line:
                current_section = "reserves"
                other_lines.append(line)
            elif "–í—Ä–∞—Ç–∞—Ä–∏:" in line:
                current_section = "goalies"
                other_lines.append(line)
            elif line.strip().startswith(('1.', '2.', '3.', '4.', '5.', '6.', '7.', '8.', '9.')):
                if current_section == "players":
                    players.append(line)
                elif current_section == "reserves":
                    reserves.append(line)
                elif current_section == "goalies":
                    goalies.append(line)
            else:
                other_lines.append(line)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ –≤—Å–µ—Ö —Å–ø–∏—Å–∫–∞—Ö
        all_participants = players + reserves + goalies
        if any(user_message in p for p in all_participants):
            bot.answer_callback_query(call.id, f"‚ö† –í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É!")
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
        if role == "–ò–≥—Ä–æ–∫":
            if player_limit > 0 and len(players) >= player_limit:
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ä–µ–∑–µ—Ä–≤
                new_number = len(reserves) + 1
                reserves.append(f"{new_number}. {user_message} (—Ä–µ–∑–µ—Ä–≤)")
                response_text = "‚úÖ –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –≤ —Ä–µ–∑–µ—Ä–≤!"
            else:
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–æ—Å—Ç–∞–≤
                new_number = len(players) + 1
                players.append(f"{new_number}. {user_message}")
                response_text = "‚úÖ –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –∫–∞–∫ –∏–≥—Ä–æ–∫!"
        else:
            # –î–ª—è –≤—Ä–∞—Ç–∞—Ä–µ–π –ª–∏–º–∏—Ç–æ–≤ –Ω–µ—Ç
            new_number = len(goalies) + 1
            goalies.append(f"{new_number}. {user_message}")
            response_text = "‚úÖ –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –∫–∞–∫ –≤—Ä–∞—Ç–∞—Ä—å!"

        # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        new_text = []
        for line in other_lines:
            if line == "–ò–≥—Ä–æ–∫–∏:":
                new_text.append(line)
                new_text.extend(players)
            elif line == "–†–µ–∑–µ—Ä–≤:":
                new_text.append(line)
                new_text.extend(reserves)
            elif line == "–í—Ä–∞—Ç–∞—Ä–∏:":
                new_text.append(line)
                new_text.extend(goalies)
            else:
                new_text.append(line)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text='\n'.join(new_text),
            reply_markup=call.message.reply_markup
        )

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        for line in call.message.text.split('\n'):
            if '—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞' in line.lower():
                date_str = line.split('—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞')[1].strip().split()[0]
                training_date = datetime.strptime(date_str, '%d.%m.%Y')
                break

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å
        role_for_sheet = 'player' if call.data == 'train_role_player' else 'goalie'
        gsheets.update_attendance(call.from_user.id, training_date, present=True)

        bot.answer_callback_query(call.id, response_text)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")

#–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ - –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∞–≤—à–∏—Ö—Å—è –∞–¥–º–∏–Ω–æ–≤
@bot.message_handler(commands=['subnotify'])
def subscribe_notifications(message):
    """–ü–æ–¥–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    if not is_admin(message.from_user.id):
        bot.reply_to(message, "‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
        return

    try:
        admin_id = message.from_user.id

        # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π config.py
        with open('config.py', 'r', encoding='utf-8') as f:
            content = f.read()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º/–¥–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ NOTIFICATION_TO
        if 'NOTIFICATION_TO =' not in content:
            content += '\nNOTIFICATION_TO = []\n'

        # –ò—â–µ–º —Ç–µ–∫—É—â–µ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞
        pattern = r'NOTIFICATION_TO\s*=\s*\[([^\]]*)\]'
        match = re.search(pattern, content)

        if not match:
            raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ NOTIFICATION_TO –≤ config.py")

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ ID
        current_ids = [int(id_.strip()) for id_ in match.group(1).split(',') if id_.strip()]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ —É–∂–µ
        if admin_id in current_ids:
            bot.reply_to(message, "‚Ñπ –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
            return

        # –î–æ–±–∞–≤–ª—è–µ–º ID
        current_ids.append(admin_id)
        new_ids_str = ', '.join(str(id_) for id_ in current_ids)
        new_content = re.sub(pattern, f'NOTIFICATION_TO = [{new_ids_str}]', content)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        with open('config.py', 'w', encoding='utf-8') as f:
            f.write(new_content)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –º–∞—Å—Å–∏–≤
        global NOTIFICATION_TO
        NOTIFICATION_TO = current_ids

        bot.reply_to(message, "‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –∑–∞–ø–∏—Å–µ–π")

    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@bot.message_handler(commands=['unsubnotify'])
def unsubscribe_notifications(message):
    """–û—Ç–ø–∏—Å–∫–∞ –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    if not is_admin(message.from_user.id):
        bot.reply_to(message, "‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
        return

    try:
        admin_id = message.from_user.id

        with open('config.py', 'r', encoding='utf-8') as f:
            content = f.read()

        pattern = r'NOTIFICATION_TO\s*=\s*\[([^\]]*)\]'
        match = re.search(pattern, content)

        if not match:
            bot.reply_to(message, "‚Ñπ –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
            return

        current_ids = [int(id_.strip()) for id_ in match.group(1).split(',') if id_.strip()]

        if admin_id not in current_ids:
            bot.reply_to(message, "‚Ñπ –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
            return

        # –£–¥–∞–ª—è–µ–º ID
        current_ids.remove(admin_id)
        new_ids_str = ', '.join(str(id_) for id_ in current_ids)
        new_content = re.sub(pattern, f'NOTIFICATION_TO = [{new_ids_str}]', content)

        with open('config.py', 'w', encoding='utf-8') as f:
            f.write(new_content)

        global NOTIFICATION_TO
        NOTIFICATION_TO = current_ids

        bot.reply_to(message, "‚úÖ –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")

    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
def send_admin_notification(message_text):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –∞–¥–º–∏–Ω–∞–º"""
    for admin_id in NOTIFICATION_TO:
        try:
            bot.send_message(admin_id, message_text)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

@bot.message_handler(commands=['help'])
def show_help(message):
    help_text = """
üìå –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:

üèãÔ∏è‚Äç‚ôÇÔ∏è –ó–∞–ø–∏—Å—å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ò–≥—Ä–æ–∫" –∏–ª–∏ "–í—Ä–∞—Ç–∞—Ä—å" –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ

–î–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏ –Ω–∞–∂–º–∏—Ç–µ "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å"

üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ
/register - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ (—Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑)

‚Ñπ –ü–æ–º–æ—â—å
/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥



üîê –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:

üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞–º–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
/addtemplate - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω
–§–æ—Ä–º–∞—Ç:
/addtemplate  
–ù–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞   
–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–∞—Ç—É —É–∫–∞–∑—ã–≤–∞—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ {date})

–°—Ç—Ä–æ–∫–∏ –≤ –∫–æ–Ω—Ü–µ —Å–æ–æ–±—â–µ–Ω–∏—è: 
"–°–ø–∏—Å–æ–∫ –∫—Ä–∞—Å–∞–≤—á–∏–∫–æ–≤: 
–ò–≥—Ä–æ–∫–∏: 
–í—Ä–∞—Ç–∞—Ä–∏:
–†–µ–∑–µ—Ä–≤:"

–ó–∞—à–∏—Ç—ã –≤ –∫–æ–¥ –∫–∞–∫ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –∏ –±—É–¥—É—Ç —É–∫–∞–∑–∞–Ω—ã –≤ –∫–æ–Ω—Ü–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ª—é–±–æ–≥–æ —à–∞–±–ª–æ–Ω–∞. –û—Ç–¥–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –∏—Ö –Ω–µ –Ω—É–∂–Ω–æ

–ü—Ä–∏–º–µ—Ä:
/addtemplate  
–ó–∏–º–Ω–∏–π  
–û–±—ä—è–≤–ª—è–µ—Ç—Å—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –≤ –§–û–ö –ó–∏–º–Ω–∏–π. –î–∞—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: {date}
–ë—Ä–∞—Ç—å –°–í–ï–¢–õ–´–ï –∏ –¢–ï–ú–ù–´–ï —Å–≤–∏—Ç–µ—Ä–∞

/edittemplate - –ò–∑–º–µ–Ω–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —à–∞–±–ª–æ–Ω
/deletetemplate - –£–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω
/listtemplates - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤

üèü –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
/createtrain - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É (–ø–æ—à–∞–≥–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å)

‚ùå –û—Ç–º–µ–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
/canceltrain - –û—Ç–º–µ–Ω–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É (–ø–æ—à–∞–≥–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å)

üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏
/addadmin - –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
/removeadmin - –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)
/admin - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ –ø—Ä–∞–≤–∞
/users - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

üïí –§–æ—Ä–º–∞—Ç—ã –¥–∞—Ç –∏ –≤—Ä–µ–º–µ–Ω–∏
–î–∞—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.12.2025)

–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.12.2025 18:00)

‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
–û—Ç–º–µ–Ω—è—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –±—É–¥—É—â–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏

–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã, —É–∫–∞–∑–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞, –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω—ã

–ù–µ–ª—å–∑—è —Å–Ω—è—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å —Å–∞–º–æ–≥–æ —Å–µ–±—è

üîÑ –õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã
–ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –±–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —à–∞–±–ª–æ–Ω—ã

–ò–≥—Ä–æ–∫–∏ –º–æ–≥—É—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –∫–∞–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–æ—Å—Ç–∞–≤, —Ç–∞–∫ –∏ –≤ —Ä–µ–∑–µ—Ä–≤ (–ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞)

–í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—é—Ç—Å—è —Å Google –¢–∞–±–ª–∏—Ü–µ–π

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.

–ò—Å—Ö–æ–¥–Ω–∏–∫–∏ –±–æ—Ç–∞:
https://github.com/Stabbar/ArmadaBookingBotAdmin/tree/master

–ö–æ–Ω—Ñ–∏–≥ –∏ –∫—Ä–µ–¥—ã –≥—É–≥–ª-–¥–æ–∫–∞ —Å–∞–º —Å–æ–±–µ—Ä–µ—à—å
"""
    bot.reply_to(message, help_text)



def cleanup_messages_store():
    """–û—á–∏—â–∞–µ—Ç —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –æ—Ç —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    global training_messages_store

    current_date = datetime.now().date()
    old_dates = []

    for date_str in training_messages_store:
        try:
            msg_date = datetime.strptime(date_str, '%d.%m.%Y').date()
            if msg_date < current_date:
                old_dates.append(date_str)
        except:
            continue

    for date_str in old_dates:
        del training_messages_store[date_str]

    # –ü–æ–≤—Ç–æ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
    Timer(86400, cleanup_messages_store).start()


# –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
cleanup_messages_store()

if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥")
    bot.polling()