import re
from threading import Timer

import telebot

from config import TELEGRAM_TOKEN, ADMIN_IDS, TRAINING_CHAT_ID_TEST, CONFIG_ADMINS
from gsheets import GoogleSheetsClient
from templates_manager import TemplatesManager

TRAINING_CHAT_ID = TRAINING_CHAT_ID_TEST
#TRAINING_CHAT_ID = TRAINING_CHAT_ID_STAGING
gsheets = GoogleSheetsClient()
bot = telebot.TeleBot(TELEGRAM_TOKEN)
templates_manager = TemplatesManager()

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–∞—Ç—ã
waiting_for_date = {}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
training_states = {}

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö
training_messages_store = {}

def is_admin(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    return user_id in ADMIN_IDS or CONFIG_ADMINS

@bot.message_handler(commands=['addtemplate'])
def add_template(message):
    if not is_admin(message.from_user.id):
        bot.reply_to(message, "‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
        return

    try:
        parts = message.text.split('\n', 2)
        if len(parts) < 3:
            raise ValueError(
                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                "/addtemplate\n"
                "–Ω–∞–∑–≤–∞–Ω–∏–µ\n"
                "—Ç–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞\n\n"
                "–ü—Ä–∏–º–µ—Ä:\n/addtemplate\n–ª–µ—Ç–Ω–∏–π\n–õ–µ—Ç–Ω—è—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ {date}\n–ú–µ—Å—Ç–æ: {location}"
            )

        name = parts[1].strip()
        template_text = parts[2].strip()

        if templates_manager.add_template(name, template_text):
            bot.reply_to(message, f"‚úÖ –®–∞–±–ª–æ–Ω '{name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
        else:
            bot.reply_to(message, f"‚ùå –®–∞–±–ª–æ–Ω '{name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@bot.message_handler(commands=['edittemplate'])
def edit_template(message):
    if not is_admin(message.from_user.id):
        bot.reply_to(message, "‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
        return

    try:
        parts = message.text.split('\n', 2)
        if len(parts) < 3:
            raise ValueError(
                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                "/edittemplate\n"
                "–Ω–∞–∑–≤–∞–Ω–∏–µ\n"
                "–Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç\n\n"
                "–ü—Ä–∏–º–µ—Ä:\n/edittemplate\n–∑–∏–º–Ω–∏–π\n–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞"
            )

        name = parts[1].strip()
        new_text = parts[2].strip()

        if templates_manager.edit_template(name, new_text):
            bot.reply_to(message, f"‚úÖ –®–∞–±–ª–æ–Ω '{name}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!")
        else:
            bot.reply_to(message, f"‚ùå –®–∞–±–ª–æ–Ω '{name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")

    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@bot.message_handler(commands=['deletetemplate'])
def delete_template(message):
    if not is_admin(message.from_user.id):
        bot.reply_to(message, "‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
        return

    try:
        name = message.text.split(' ', 1)[1].strip()
        if templates_manager.delete_template(name):
            bot.reply_to(message, f"‚úÖ –®–∞–±–ª–æ–Ω '{name}' —É–¥–∞–ª—ë–Ω!")
        else:
            bot.reply_to(message, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω '{name}'")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@bot.message_handler(commands=['listtemplates'])
def list_templates(message):
    templates = templates_manager.list_templates()
    response = "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã:\n\n" + "\n".join(f"‚Ä¢ {name}" for name in templates)
    bot.reply_to(message, response)


from telebot import types
from datetime import datetime

@bot.message_handler(commands=['createtrain'])
def start_training_creation(message):
    if not is_admin(message.from_user.id):
        bot.reply_to(message, "‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤
    templates = templates_manager.list_templates()

    if not templates:
        bot.reply_to(message, "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —à–∞–±–ª–æ–Ω —á–µ—Ä–µ–∑ /addtemplate")
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —à–∞–±–ª–æ–Ω–∞–º–∏
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    for template in templates:
        markup.add(types.KeyboardButton(template))

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—ã–±–æ—Ä —à–∞–±–ª–æ–Ω–∞
    msg = bot.send_message(
        message.chat.id,
        "üìã –ö–∞–∫–æ–π —à–∞–±–ª–æ–Ω –≤—ã–±—Ä–∞—Ç—å?",
        reply_markup=markup
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    training_states[message.from_user.id] = {
        'step': 'select_template',
        'chat_id': message.chat.id
    }

    bot.register_next_step_handler(msg, process_template_selection)


def process_template_selection(message):
    user_id = message.from_user.id
    if user_id not in training_states:
        return

    template_name = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
    if template_name not in templates_manager.list_templates():
        bot.reply_to(message, "‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        del training_states[user_id]
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω
    training_states[user_id]['template_name'] = template_name
    training_states[user_id]['step'] = 'enter_date'

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞—Ç—É
    msg = bot.send_message(
        message.chat.id,
        "üìÖ –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 15.04.2025 19:30",
        reply_markup=types.ReplyKeyboardRemove()
    )

    bot.register_next_step_handler(msg, process_date_input)

def process_player_limit(message):
    try:
        try:
            player_limit = int(message.text)
            if player_limit < 0:
                raise ValueError
        except ValueError:
            bot.reply_to(message, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ ‚â• 0")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–∏–º–∏—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        training_states[message.from_user.id]['player_limit'] = player_limit

        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        finalize_training_creation(message)

    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

def process_date_input(message):
    user_id = message.from_user.id
    if user_id not in training_states:
        return

    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
        train_date = datetime.strptime(message.text, '%d.%m.%Y %H:%M')
        if train_date < datetime.now():
            raise ValueError("–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É
        training_states[user_id]['date'] = train_date.strftime('%d.%m.%Y %H:%M')
        training_states[user_id]['step'] = 'confirm_creation'

        # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω
        template = templates_manager.get_template(training_states[user_id]['template_name'])

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (–ø–æ–∫–∞ –±–µ–∑ –¥–∞—Ç—ã)
        preview_text = template.format(
            date="[–¥–∞—Ç–∞ –±—É–¥–µ—Ç –∑–¥–µ—Å—å]",
            location="[–º–µ—Å—Ç–æ –∏–∑ —à–∞–±–ª–æ–Ω–∞]",
            details="[–¥–µ—Ç–∞–ª–∏ –∏–∑ —à–∞–±–ª–æ–Ω–∞]"
        ).replace("[–¥–∞—Ç–∞ –±—É–¥–µ—Ç –∑–¥–µ—Å—å]", training_states[user_id]['date'])

        msg = bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ (—á–∏—Å–ª–æ –∏–ª–∏ 0 –±–µ–∑ –ª–∏–º–∏—Ç–∞):")
        bot.register_next_step_handler(msg, process_player_limit)

    except ValueError as e:
        bot.reply_to(message, f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {str(e)}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        bot.register_next_step_handler(message, process_date_input)
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ª–∏–º–∏—Ç–æ–≤: {str(e)}")

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton("‚úÖ –°–æ–∑–¥–∞—Ç—å"), types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é
        bot.send_message(
            message.chat.id,
            f"üìù –ü—Ä–µ–≤—å—é —Å–æ–æ–±—â–µ–Ω–∏—è:\n\n{preview_text}\n\n"
            "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:",
            reply_markup=markup
        )

    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        del training_states[user_id]


@bot.message_handler(func=lambda m: training_states.get(m.from_user.id, {}).get('step') == 'confirm_creation')
def finalize_training_creation(message):
    try:
        state = training_states[message.from_user.id]
        template = templates_manager.get_template(state['template_name'])

        train_text = template.format(
            date=state['date'],
            location="[–º–µ—Å—Ç–æ –∏–∑ —à–∞–±–ª–æ–Ω–∞]",
            details="[–¥–µ—Ç–∞–ª–∏ –∏–∑ —à–∞–±–ª–æ–Ω–∞]"
        ) + "\n\n–°–ø–∏—Å–æ–∫ –∫—Ä–∞—Å–∞–≤—á–∏–∫–æ–≤:\n–ò–≥—Ä–æ–∫–∏:\n–í—Ä–∞—Ç–∞—Ä–∏:\n–†–µ–∑–µ—Ä–≤:"

        markup = types.InlineKeyboardMarkup()
        markup.row(
            types.InlineKeyboardButton("–ò–≥—Ä–æ–∫", callback_data='train_role_player'),
            types.InlineKeyboardButton("–í—Ä–∞—Ç–∞—Ä—å", callback_data='train_role_goalie')
        )
        markup.row(
            types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data='train_cancel')
        )
        sent_message = bot.send_message(
            chat_id=TRAINING_CHAT_ID,
            text=train_text,
            reply_markup=markup
        )
        store_training_message(sent_message)

        bot.send_message(
            message.chat.id,
            f"‚úÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –ø–æ —à–∞–±–ª–æ–Ω—É '{state['template_name']}'!",
            reply_markup=types.ReplyKeyboardRemove()
        )


    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        if message.from_user.id in training_states:
            del training_states[message.from_user.id]

@bot.message_handler(func=lambda m: m.chat.id == TRAINING_CHAT_ID and "—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞" in m.text.lower())
def handle_training_message(message):
    """–ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö"""
    store_training_message(message)

@bot.callback_query_handler(func=lambda call: call.data == 'train_cancel')
def handle_cancel_registration(call):
    global training_date
    try:
        user = call.from_user

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
        user_data = gsheets.get_user_record(user.id)
        if not user_data or not user_data.get('message'):
            bot.answer_callback_query(
                call.id,
                "‚ùå –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                show_alert=True
            )
            return

        user_message = user_data['message']

        # –†–∞–∑–±–∏—Ä–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        lines = call.message.text.split('\n')
        players = []
        goalies = []
        other_lines = []
        current_section = None
        found = False

        for line in lines:
            if "–ò–≥—Ä–æ–∫–∏:" in line:
                current_section = "players"
                other_lines.append(line)
            elif "–í—Ä–∞—Ç–∞—Ä–∏:" in line:
                current_section = "goalies"
                other_lines.append(line)
            elif line.strip().startswith(('1.', '2.', '3.', '4.', '5.', '6.', '7.', '8.', '9.')):
                if user_message in line:
                    found = True
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

                if current_section == "players":
                    players.append(line)
                elif current_section == "goalies":
                    goalies.append(line)
            else:
                other_lines.append(line)

        if not found:
            bot.answer_callback_query(
                call.id,
                "‚ö† –í—ã –Ω–µ –±—ã–ª–∏ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É",
                show_alert=True
            )
            return

        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω—É–º–µ—Ä–∞—Ü–∏—é
        players_renumbered = []
        for i, player in enumerate(players, 1):
            parts = player.split('.', 1)
            players_renumbered.append(f"{i}.{parts[1]}")

        goalies_renumbered = []
        for i, goalie in enumerate(goalies, 1):
            parts = goalie.split('.', 1)
            goalies_renumbered.append(f"{i}.{parts[1]}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        new_text = []
        for line in other_lines:
            if line == "–ò–≥—Ä–æ–∫–∏:":
                new_text.append(line)
                new_text.extend(players_renumbered)
            elif line == "–í—Ä–∞—Ç–∞—Ä–∏:":
                new_text.append(line)
                new_text.extend(goalies_renumbered)
            else:
                new_text.append(line)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text='\n'.join(new_text),
            reply_markup=call.message.reply_markup
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å
        for line in call.message.text.split('\n'):
            if '—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞' in line.lower():
                date_str = line.split('—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞')[1].strip().split()[0]
                training_date = datetime.strptime(date_str, '%d.%m.%Y')
                break

        gsheets.update_attendance(call.from_user.id, training_date, present=False)

        bot.answer_callback_query(call.id, "‚úÖ –í–∞—à–∞ –∑–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞!")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")


def store_training_message(message):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞"""
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
        date_match = re.search(r'(\d{2}\.\d{2}\.\d{4})', message.text)
        if not date_match:
            return

        date_str = date_match.group(1)
        if date_str not in training_messages_store:
            training_messages_store[date_str] = []

        training_messages_store[date_str].append({
            'chat_id': message.chat.id,
            'message_id': message.message_id,
            'text': message.text
        })
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


def find_training_message(chat_id, training_date):
    """–ò—â–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ –ø–æ –¥–∞—Ç–µ –≤ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞"""
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø–æ–∏—Å–∫–∞ (–¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è)
        search_date = training_date.strftime('%d.%m.%Y')

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å–æ–æ–±—â–µ–Ω–∏–π (–º–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
        messages = bot.get_chat_history(chat_id, limit=100)

        for msg in messages:
            if msg.text and search_date in msg.text and "—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞" in msg.text.lower():
                return {
                    'chat_id': chat_id,
                    'message_id': msg.message_id,
                    'text': msg.text
                }
        return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return None


def find_all_training_messages(chat_id, training_date):
    """–ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ (–æ—Å–Ω–æ–≤–Ω–æ–µ –∏ –≤–æ–∑–º–æ–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è)"""
    try:
        search_date = training_date.strftime('%d.%m.%Y')
        messages = bot.get_chat_history(chat_id, limit=200)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç
        result = []

        for msg in messages:
            if msg.text and search_date in msg.text and "—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞" in msg.text.lower():
                result.append({
                    'chat_id': chat_id,
                    'message_id': msg.message_id,
                    'text': msg.text
                })
        return result
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        return []


def is_training_message(msg, training_date):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É"""
    if not msg.text:
        return False

    date_str = training_date.strftime('%d.%m.%Y')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω—É–∂–Ω—É—é –¥–∞—Ç—É
    return ("—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞" in msg.text.lower() and
            date_str in msg.text and
            any(word in msg.text.lower() for word in ["—Å–ø–∏—Å–æ–∫", "–∏–≥—Ä–æ–∫–∏", "–≤—Ä–∞—Ç–∞—Ä–∏"]))



@bot.message_handler(commands=['canceltrain'])
def start_cancel_training(message):
    if not is_admin(message.from_user.id):
        bot.reply_to(message, "‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
        return

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞—Ç—É —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    msg = bot.reply_to(message, "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    bot.register_next_step_handler(msg, process_cancel_date)


def process_cancel_date(message):
    try:
        user_id = message.from_user.id
        if not is_admin(user_id):
            bot.reply_to(message, "‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
            return

        date_str = message.text.strip()
        training_date = datetime.strptime(date_str, '%d.%m.%Y').date()
        current_date = datetime.now().date()

        if training_date <= current_date:
            bot.reply_to(message, "‚ùå –ú–æ–∂–Ω–æ –æ—Ç–º–µ–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ –±—É–¥—É—â–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏!")
            return

        # 1. –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        messages_to_delete = training_messages_store.get(date_str, [])
        success_count = 0

        for msg_data in messages_to_delete:
            try:
                bot.delete_message(msg_data['chat_id'], msg_data['message_id'])
                success_count += 1
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {msg_data['message_id']}: {e}")

        # 2. –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
        if gsheets.cancel_training(training_date):
            result_msg = f"‚õîÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞ {date_str} –æ—Ç–º–µ–Ω–µ–Ω–∞!"
            if success_count < len(messages_to_delete):
                result_msg += f"\n(–£–¥–∞–ª–µ–Ω–æ {success_count} –∏–∑ {len(messages_to_delete)} —Å–æ–æ–±—â–µ–Ω–∏–π)"
            bot.reply_to(message, result_msg)
        else:
            bot.reply_to(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –≤ —Ç–∞–±–ª–∏—Ü–µ")

    except ValueError as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã: {e}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
        # –ü–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞—Ç—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
        msg = bot.reply_to(message, "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
        bot.register_next_step_handler(msg, process_cancel_date)
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤
@bot.message_handler(commands=['admin'])
def check_admin(message):
    if is_admin(message.from_user.id):
        bot.reply_to(message, "üõ° –í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!")
    else:
        bot.reply_to(message, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@bot.message_handler(commands=['addadmin'])
def add_admin(message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not is_admin(message.from_user.id):
        bot.reply_to(message, "‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not message.reply_to_message:
        bot.reply_to(message, "‚Ñπ –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
        return

    target_user_id = message.reply_to_message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if target_user_id in ADMIN_IDS:
        bot.reply_to(message,
                     f"‚Ñπ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.reply_to_message.from_user.username} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
        return

    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        ADMIN_IDS.append(target_user_id)

        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–µ–∂–¥—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–º–∏
        # save_admin_ids_to_config(ADMIN_IDS)

        bot.reply_to(message, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.reply_to_message.from_user.username} —Ç–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {str(e)}")


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
@bot.message_handler(commands=['users'])
def list_users(message):
    if not is_admin(message.from_user.id):
        bot.reply_to(message, "‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
        return

    try:
        users = gsheets.worksheet.get_all_records()
        response = "üìä –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n"
        for user in users:
            admin_flag = " (admin)" if user.get('is_admin') == 'TRUE' else ""
            response += f"üë§ {user.get('full_name')}{admin_flag}\n"
        bot.reply_to(message, response)
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")


@bot.message_handler(commands=['removeadmin'])
def remove_admin(message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    admin_id = message.from_user.id
    if not is_admin(admin_id):
        bot.reply_to(message, "‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not message.reply_to_message:
        bot.reply_to(message, "‚Ñπ –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–∂–∞–ª–æ–≤–∞—Ç—å")
        return

    target_user_id = message.reply_to_message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è —Å–Ω—è—Ç—å –ø—Ä–∞–≤–∞ —Å —Å–µ–±—è
    if target_user_id == admin_id:
        bot.reply_to(message, "‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–Ω—è—Ç—å –ø—Ä–∞–≤–∞ —Å —Å–µ–±—è!")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∞–¥–º–∏–Ω
    if target_user_id in CONFIG_ADMINS:  # –∏–ª–∏ if target_user_id in ADMIN_IDS[:N] –¥–ª—è –ø–µ—Ä–≤—ã—Ö N –∞–¥–º–∏–Ω–æ–≤
        bot.reply_to(message, "‚ùå –≠—Ç–æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∫–∞–∑–∞–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞!")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ–æ–±—â–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º
    if target_user_id not in ADMIN_IDS:
        bot.reply_to(message,
                     f"‚Ñπ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.reply_to_message.from_user.username} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
        return

    try:
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        ADMIN_IDS.remove(target_user_id)

        bot.reply_to(message, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.reply_to_message.from_user.username} –±–æ–ª—å—à–µ –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!")
    except ValueError:
        bot.reply_to(message,
                     f"‚Ñπ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.reply_to_message.from_user.username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–Ω—è—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {str(e)}")

@bot.message_handler(commands=['register'])
def handle_register(message):
    try:
        user = message.from_user

        if gsheets.is_user_exists(user.id):
            bot.reply_to(message, "‚ö†Ô∏è –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
            return

        # –ó–∞–ø—Ä–æ—Å –§–ò–û
        msg = bot.send_message(
            message.chat.id,
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –§–∞–º–∏–ª–∏—é –∏ –ò–º—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:",
            reply_markup=types.ForceReply()
        )
        bot.register_next_step_handler(msg, lambda m: save_registration(m, user))

    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")


def save_registration(message, user):
    try:
        full_name = message.text.strip()
        if len(full_name.split()) < 2:
            raise ValueError("–¢—Ä–µ–±—É–µ—Ç—Å—è –≤–≤–µ—Å—Ç–∏ –∏ –§–∞–º–∏–ª–∏—é –∏ –ò–º—è")

        if gsheets.add_record(user, full_name):
            bot.reply_to(message, f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:\nID: {user.id}\n–ò–º—è: {full_name}")
        else:
            bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏!")

    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")


@bot.callback_query_handler(func=lambda call: call.data.startswith('train_role_'))
def handle_training_button(call):
    global training_date
    try:
        user = call.from_user
        role = "–ò–≥—Ä–æ–∫" if call.data == 'train_role_player' else "–í—Ä–∞—Ç–∞—Ä—å"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        if not gsheets.is_user_exists(user.id):
            bot.answer_callback_query(
                call.id,
                "‚õî –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register",
                show_alert=True
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
        user_data = gsheets.get_user_record(user.id)
        if not user_data or not user_data.get('message'):
            bot.answer_callback_query(
                call.id,
                "‚ùå –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                show_alert=True
            )
            return

        user_message = user_data['message']

        # –†–∞–∑–±–∏—Ä–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        lines = call.message.text.split('\n')
        players = []
        reserves = []
        goalies = []
        other_lines = []
        current_section = None
        player_limit = 0

        for line in lines:
            if "–õ–∏–º–∏—Ç –∏–≥—Ä–æ–∫–æ–≤:" in line:
                try:
                    player_limit = int(line.split(":")[1].strip())
                except:
                    player_limit = 0
            elif "–ò–≥—Ä–æ–∫–∏:" in line:
                current_section = "players"
                other_lines.append(line)
            elif "–†–µ–∑–µ—Ä–≤:" in line:
                current_section = "reserves"
                other_lines.append(line)
            elif "–í—Ä–∞—Ç–∞—Ä–∏:" in line:
                current_section = "goalies"
                other_lines.append(line)
            elif line.strip().startswith(('1.', '2.', '3.', '4.', '5.', '6.', '7.', '8.', '9.')):
                if current_section == "players":
                    players.append(line)
                elif current_section == "reserves":
                    reserves.append(line)
                elif current_section == "goalies":
                    goalies.append(line)
            else:
                other_lines.append(line)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ –≤—Å–µ—Ö —Å–ø–∏—Å–∫–∞—Ö
        all_participants = players + reserves + goalies
        if any(user_message in p for p in all_participants):
            bot.answer_callback_query(call.id, f"‚ö† –í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É!")
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
        if role == "–ò–≥—Ä–æ–∫":
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤
            if player_limit > 0 and len(players) >= player_limit:
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ä–µ–∑–µ—Ä–≤
                new_number = len(reserves) + 1
                reserves.append(f"{new_number}. {user_message} (—Ä–µ–∑–µ—Ä–≤)")
                response_text = "‚úÖ –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –≤ —Ä–µ–∑–µ—Ä–≤!"
            else:
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–æ—Å—Ç–∞–≤
                new_number = len(players) + 1
                players.append(f"{new_number}. {user_message}")
                response_text = "‚úÖ –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –∫–∞–∫ –∏–≥—Ä–æ–∫!"
        else:
            # –î–ª—è –≤—Ä–∞—Ç–∞—Ä–µ–π –ª–∏–º–∏—Ç–æ–≤ –Ω–µ—Ç
            new_number = len(goalies) + 1
            goalies.append(f"{new_number}. {user_message}")
            response_text = "‚úÖ –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –∫–∞–∫ –≤—Ä–∞—Ç–∞—Ä—å!"

        # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        new_text = []
        for line in other_lines:
            if line == "–ò–≥—Ä–æ–∫–∏:":
                new_text.append(line)
                new_text.extend(players)
            elif line == "–†–µ–∑–µ—Ä–≤:":
                new_text.append(line)
                new_text.extend(reserves)
            elif line == "–í—Ä–∞—Ç–∞—Ä–∏:":
                new_text.append(line)
                new_text.extend(goalies)
            else:
                new_text.append(line)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text='\n'.join(new_text),
            reply_markup=call.message.reply_markup
        )

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        for line in call.message.text.split('\n'):
            if '—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞' in line.lower():
                date_str = line.split('—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞')[1].strip().split()[0]
                training_date = datetime.strptime(date_str, '%d.%m.%Y')
                break

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å
        role_for_sheet = 'player' if call.data == 'train_role_player' else 'goalie'
        gsheets.update_attendance(call.from_user.id, training_date, present=True)

        bot.answer_callback_query(call.id, response_text)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")

@bot.message_handler(commands=['help'])
def show_help(message):
    help_text = """
üìã –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞–º–∏:

/addtemplate - –î–æ–±–∞–≤–∏—Ç—å —à–∞–±–ª–æ–Ω
/edittemplate - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω
/deletetemplate - –£–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω

üìå –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:
/createtrain [—à–∞–±–ª–æ–Ω]

–ü—Ä–∏–º–µ—Ä:
/createtrain
15.12.2025 18:00
"""
    bot.reply_to(message, help_text)



def cleanup_messages_store():
    """–û—á–∏—â–∞–µ—Ç —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –æ—Ç —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    global training_messages_store

    current_date = datetime.now().date()
    old_dates = []

    for date_str in training_messages_store:
        try:
            msg_date = datetime.strptime(date_str, '%d.%m.%Y').date()
            if msg_date < current_date:
                old_dates.append(date_str)
        except:
            continue

    for date_str in old_dates:
        del training_messages_store[date_str]

    # –ü–æ–≤—Ç–æ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
    Timer(86400, cleanup_messages_store).start()


# –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
cleanup_messages_store()

if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥")
    bot.polling(none_stop=True)